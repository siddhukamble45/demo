name: Test PyPI Upload

on:
  workflow_dispatch: # Allows manual trigger

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4  # Ensure the repo is checked out

    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python3 -m pip install virtualenv
        virtualenv -p python3 venv && . venv/bin/activate
        pip install twine build pytest pytest-cov
        pip install -r requirements.txt

    - name: Test with pytest
      run: |
        filepath=$PWD
        . venv/bin/activate && cd user_manager
        python3 -m pytest tests
        cd $filepath


    - name: Build the wheel
      run: |
        . venv/bin/activate
        python3 -m build -w

    - name: Install created package
      run: |
          rm -rf venv
          virtualenv -p python3 venv && . venv/bin/activate
          pip install dist/*.whl

    - name: Update Changelog Entry
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        . venv/bin/activate
        python update_changelog.py

    - name: Commit and push changes
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GIT_AUTHOR_NAME: 'Siddheshwar Kamble'
        GIT_AUTHOR_EMAIL: 'siddhukamble45@gmail.com'
        GIT_COMMITTER_NAME: 'Siddheshwar Kamble'
        GIT_COMMITTER_EMAIL: 'siddhukamble45@gmail.com'
        GIT_TOKEN: ${{ secrets.PAT_TOKEN }}
      run: |
        git config --global user.name "${GIT_AUTHOR_NAME}"
        git config --global user.email "${GIT_AUTHOR_EMAIL}"
        if git diff --quiet docs/CHANGELOG.md; then
          echo "No changes to commit"
          exit 0
        else
          git add docs/CHANGELOG.md
          git commit -m "Update CHANGELOG.md for Release version"
          git push https://x-access-token:${GIT_TOKEN}@github.com/${{ github.repository }} HEAD:${{ github.ref }}
        fi

    - name: Upload to Test PyPI
      env:
        TWINE_USERNAME: ${{ secrets.TEST_PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        . venv/bin/activate
        pip install twine
        twine upload --repository-url https://test.pypi.org/legacy/ dist/*
  release_to_docker_hub:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4  # Check out the repository code to the runner.

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3  # Set up QEMU for multi-platform builds.

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3  # Set up Docker Buildx for advanced builds (multi-platform).

      - name: Log in to Docker Hub
        uses: docker/login-action@v3  # Logs into Docker Hub using secrets.
        with:
          username: ${{ secrets.DOCKER_USERNAME }}  # Docker Hub username stored as a GitHub secret.
          password: ${{ secrets.DOCKER_PASSWORD }}  # Docker Hub token (password) stored as a GitHub secret.
      - name: Read Version from pom.xml
        id: get_version
        run: |
          # Extract the <revision> property from pom.xml using grep and sed
          VERSION=$(grep -oPm1 "(?<=<revision>)[^<]+" pom.xml)
          echo "Extracted Version: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./docker/Dockerfile 
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/user_manager:${{ env.VERSION }}
